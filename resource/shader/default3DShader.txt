struct VS_IN
{
	float3 p 	: POSITION; 
	float3 n	: NORMAL; 
    	float4 c 	: COLOR;
	float2 t 	: TEXTURE;
};

struct VS_OUT
{
	float4 	p 		: SV_POSITION;
	float3 	n  		: NORMAL;
	float4 	c 		: COLOR0;
	float2 	t 		: TEXCOORD0;
	float3	lightLook 	: TEXCOORD1;
	float4 	lightColour 	: TEXCOORD2;
};

cbuffer cb_data : register(b0)
{
	matrix 	g_worldMat	: packoffset(c0);
	matrix 	g_viewMat	: packoffset(c4);
	matrix 	g_projMat	: packoffset(c8);
	float4  	g_meshColour	: packoffset(c12);
	float4	g_lightLook	: packoffset(c13);
};

VS_OUT VSMain(VS_IN input) 
{
	VS_OUT output = (VS_OUT)0;
	float4 localVertices = float4(input.p, 1.0f);
	float4 worldVertices = mul(localVertices, g_worldMat);
	float4 viewVertices = mul(worldVertices, g_viewMat);
	float4 projVertices = mul(viewVertices, g_projMat);

	output.p = projVertices;
	output.n = input.n;
	output.c = input.c * g_meshColour;
	output.t = input.t;
	
	float lightDot = max(0.3f, dot(input.n, -g_lightLook));
	output.lightLook = g_lightLook.xyz;
	output.lightColour = float4(lightDot, lightDot, lightDot, 1);

	return output;
}

Texture2D     	g_texture		: register(t0);
SamplerState  	g_sampleWrap	: register(s0);

float4 PSTexture(VS_OUT input) : SV_Target
{
	float4 textureColour= g_texture.Sample(g_sampleWrap, input.t);
	return input.c * textureColour;
}

float4 PSTextureLight(VS_OUT input) : SV_Target
{
	float4 textureColour = g_texture.Sample(g_sampleWrap, input.t);
	input.c.a = 1.0f;
	float lightDot = max(0.3f, dot(input.n, -input.lightLook));	
	float4 lightColour = float4(lightDot, lightDot, lightDot, 1);
	return input.c * textureColour * lightColour; 
}

float4 PSMain(VS_OUT input) : SV_Target
{
	return input.c;
}